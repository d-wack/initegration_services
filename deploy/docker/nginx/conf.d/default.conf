# Security headers
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Proxy timeout settings
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
proxy_read_timeout 60s;

# SSL configuration
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_session_tickets off;

# Modern SSL configuration
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;

# SSL certificate configuration
ssl_certificate /etc/nginx/ssl/fullchain.pem;
ssl_certificate_key /etc/nginx/ssl/privkey.pem;
ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
ssl_stapling on;
ssl_stapling_verify on;

# DNS resolver for backend host names
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# Common security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header X-Content-Type-Options "nosniff" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

# Upstream definitions
upstream webhook_service {
    server webhook_service:8000;
}

upstream oauth_service {
    server oauth_service:8001;
}

upstream logger_service {
    server logger_service:8002;
}

upstream integration_service {
    server integration_service:8003;
}

# Default HTTP server (redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name _;

    # Let's Encrypt challenge response location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Allow health check on HTTP
    location /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy"}';
    }

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Webhooks Service
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name webhooks-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/webhooks.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/webhooks.error.log warn;

    location / {
        proxy_pass http://webhook_service/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # CORS configuration
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}

# OAuth Service
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name oauth-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/oauth.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/oauth.error.log warn;

    location / {
        proxy_pass http://oauth_service/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
    }
}

# Logger Service
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name logging-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/logging.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/logging.error.log warn;

    location / {
        proxy_pass http://logger_service/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Integration Service
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name integration-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/integration.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/integration.error.log warn;

    location / {
        proxy_pass http://integration_service/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Grafana
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name grafana-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/grafana.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/grafana.error.log warn;

    location / {
        proxy_pass http://grafana:3000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add websocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Pass the auth header
        proxy_set_header Authorization "";
        
        # Prevent caching auth failures
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        
        # Additional headers for Grafana
        proxy_set_header X-Grafana-Org-Id 1;
        proxy_set_header X-WEBAUTH-USER $remote_user;
    }
}

# Prometheus
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name prometheus-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/prometheus.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/prometheus.error.log warn;

    location / {
        proxy_pass http://prometheus:9090/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Redis Commander
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name redis-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/redis.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/redis.error.log warn;

    location / {
        proxy_pass http://redis-commander:8081/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Jaeger UI
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name jaeger-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/jaeger.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/jaeger.error.log warn;

    location / {
        proxy_pass http://jaeger:16686/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# MinIO Console
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name minio-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/minio.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/minio.error.log warn;

    location / {
        proxy_pass http://minio:9001/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Loki
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name loki-dev1.slicedhealth.com;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    access_log /var/log/nginx/loki.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/loki.error.log warn;

    location / {
        proxy_pass http://loki:3100/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
