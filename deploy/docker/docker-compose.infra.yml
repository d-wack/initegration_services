name: slicedhealth

services:
  # NGINX reverse proxy
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/ubuntu/slicedhealth/integration_services/deploy/docker/nginx/conf.d:/etc/nginx/conf.d
      - /home/ubuntu/slicedhealth/integration_services/deploy/docker/nginx/ssl:/etc/nginx/ssl
      - /home/ubuntu/slicedhealth/integration_services/deploy/docker/nginx/auth:/etc/nginx/auth
      - /home/ubuntu/slicedhealth/integration_services/deploy/docker/nginx/logs:/var/log/nginx
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    depends_on:
      - postgres
      - redis
      - redis-commander
      - loki
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - integration_network

  # Certbot for Let's Encrypt certificates
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - integration_network

  # PostgreSQL for services that need a robust database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-adminpassword}
      POSTGRES_MULTIPLE_DATABASES: webhooks,oauth,logs
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgres-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-dbs.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - integration_network

  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - integration_network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-adminpassword}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - integration_network

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-adminpassword}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "https://grafana-dev1.slicedhealth.com"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - integration_network

  # Loki for log aggregation
  loki-init:
    image: busybox
    command: sh -c "mkdir -p /loki/chunks /loki/index /wal && chown -R 10001:10001 /loki /wal"
    volumes:
      - loki_data:/loki
      - loki_wal:/wal
    networks:
      - integration_network

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml -validation.allow-structured-metadata=false
    user: "10001:10001"
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
      - loki_wal:/wal
    environment:
      - LOKI_DATA_DIR=/loki
      - LOKI_WAL_DIR=/wal
    depends_on:
      - loki-init
    networks:
      - integration_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=https://prometheus-dev1.slicedhealth.com'
    networks:
      - integration_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      QUERY_BASE_PATH: /
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - integration_network

  # MinIO for object storage (if needed)
  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BROWSER_REDIRECT_URL: https://minio-dev1.slicedhealth.com
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - integration_network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  minio_data:
  loki_data:
  loki_wal:
  certbot_www:
  certbot_conf:

networks:
  integration_network:
    name: integration_network
    external: true 